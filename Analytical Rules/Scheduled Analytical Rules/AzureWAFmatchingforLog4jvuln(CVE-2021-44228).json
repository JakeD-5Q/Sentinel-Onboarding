{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "workspace": {
            "type": "String"
        }
    },
    "resources": [
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/ff031607-b24f-4dce-a921-312045376577')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/ff031607-b24f-4dce-a921-312045376577')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Scheduled",
            "properties": {
                "incidentConfiguration": {
                    "createIncident": true,
                    "groupingConfiguration": {
                        "enabled": false,
                        "reopenClosedIncident": false,
                        "lookbackDuration": "PT5M",
                        "matchingMethod": "AllEntities",
                    "groupByEntities": [],
                    "groupByAlertDetails": null,
                    "groupByCustomDetails": null
                }
            },
            "entityMappings": [
                {
                    "entityType": "IP",
                    "fieldMappings": [
                        {
                            "identifier": "Address",
                            "columnName": "IPCustomEntity"
                        }
                    ]
                }
            ],
            "queryFrequency": "PT6H",
            "queryPeriod": "PT6H",
            "triggerOperator": "GreaterThan",
            "triggerThreshold": 0,
            "severity": "High",
            "query": "AzureDiagnostics\n| where details_data_s has \"jndi:\"\n| parse details_data_s with * '${' MaliciousCommand '}' *\n| extend EncodeCmd = iff(MaliciousCommand has 'Base64/', split(split(MaliciousCommand, \"Base64/\",1)[0], \"}\", 0)[0], \"\")\n| extend EncodeCmd1 = iff(MaliciousCommand has 'base64/', split(split(MaliciousCommand, \"base64/\",1)[0], \"}\", 0)[0], \"\")\n| extend CmdLine = iff( isnotempty(EncodeCmd), EncodeCmd, EncodeCmd1)\n| extend DecodedCmdLine = base64_decode_tostring(tostring(CmdLine))\n| extend DecodedCmdLine = iff( isnotempty(DecodedCmdLine), DecodedCmdLine, \"Unable to decode\")\n| project TimeGenerated, Target=hostname_s, MaliciousHost = clientIp_s, MaliciousCommand, details_data_s, DecodedCmdLine, Message, ruleSetType_s, OperationName, SubscriptionId, details_message_s, details_file_s \n| extend IPCustomEntity = MaliciousHost, timestamp = TimeGenerated\n",
            "suppressionDuration": "PT1H",
            "suppressionEnabled": false,
            "tactics": [
                "InitialAccess"
            ],
            "displayName": "Azure WAF matching for Log4j vuln(CVE-2021-44228)",
            "enabled": false,
            "description": "This query will alert on a positive pattern match by Azure WAF for CVE-2021-44228 log4j vulnerability exploitation attempt. If possible, it then decodes the malicious command for further analysis.\n Refrence: https://www.microsoft.com/security/blog/2021/12/11/guidance-for-preventing-detecting-and-hunting-for-cve-2021-44228-log4j-2-exploitation/",
            "alertRuleTemplateName": null
        },
        "apiVersion": "2021-09-01-preview"
    }
]
}
